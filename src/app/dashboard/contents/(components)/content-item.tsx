"use client";
import React from "react";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { toast } from "@/components/ui/toast/useToast";
import { getContentById, updateContentById } from "@/lib/client-fetch";
import { getQueryClient } from "@/lib/utils";
import { Contents } from "@prisma/client";
import { useMutation, useQuery } from "@tanstack/react-query";

export default function ContentItem({ content }: { content: Contents }) {
  /**
   * @description Mengambil data konten dari database berdasarkan id konten yang autogenerated sebagai integer. Setiap query akan memiliki query key yang dapat digunakan lagi, contoh untuk konten dengan id 1 akan memiliki query key ["content", 1].
   * @returns Data konten yang ada di database. Jika konten tidak ditemukan, akan mengembalikan error.
   * @example {id: 1, name: "hero-title", content: "Selamat datang di website HIMAFI!"}
   * @see https://react-query.tanstack.com/guides/query-keys
   */
  const { data, isLoading, isError } = useQuery<Contents, Error>({
    queryKey: ["content", content.id],
    queryFn: () => getContentById(content.id),
    initialData: content,
    refetchInterval: 1000 * 60 * 60, // 1 hour
  });

  /**
   * @description Mutasi digunakan untuk melakukan update untuk konten dengan id tertentu.
   * @returns Tidak ada, hanya mengubah data konten di database.
   * @see https://react-query.tanstack.com/guides/mutations
   */
  const mutation = useMutation({
    mutationKey: ["content", content.id],
    mutationFn: () => updateContentById(content.id, contentValue),
    /**
     * @description Menampilkan toast saat mutasi dimulai.
     */
    onMutate: () => {
      toast({
        title: "Updating",
        description: (
          <p>
            Updating <span className="font-bold">{content.name}</span>&apos;
            content...
          </p>
        ),
      });
    },

    /**
     *
     * @param data Data konten terbaru yang berhasil diupdate. Tipe data ini adalah Contents.
     * @description Setelah mutasi berhasil, data di database sudah berubah. Fungsi setUpdatedContent digunakan untuk mengubah data yang ada di komponen Input, sehingga di tampilan user data sudah terupdate. Setelah itu data query untuk key ["content", content.id] diubah dengan data terbaru, dan data query untuk key ["contents"] diinvalidate agar data di halaman ContentsDashboard terupdate. Saat semua itu sukses dilakukan, maka akan ditampilkan toast. SEbaliknya, jika ada error akan ditampilkan toast error.
     * @see https://react-query.tanstack.com/guides/mutations#onsuccessonsuccessdata-t-error-void
     */
    onSuccess: async (data) => {
      const res: Contents = await data.json();
      setEdit(false);
      setUpdatedContent(res.content);
      queryClient.setQueryData(["content", content.id], res);
      queryClient.invalidateQueries(["contents"]);
      toast({
        title: "Success",
        description: (
          <p>
            Content <span className="font-bold">{res.name}</span> successfully
            updated.
          </p>
        ),
      });
    },
    onError: (err: Error) => {
      toast({
        variant: "destructive",
        title: "Error",
        description: err.message,
      });
    },
  });

  const queryClient = getQueryClient();
  /** updatedContent adalah konten yang tampil di bagian Input atau Card konten */
  const [updatedContent, setUpdatedContent] = React.useState(data.content);

  /** contentValue adalah konten terbaru yang akan digunakan untuk meng-update konten lama */
  const [contentValue, setContentValue] = React.useState(updatedContent);

  /** Ini state untuk nampilin Input edit atau tidak. */
  const [edit, setEdit] = React.useState(false);

  const handleCancel = () => {
    setContentValue(data.content);
    setEdit(false);
  };

  return (
    <Card className="hover:bg-foreground/5">
      <CardHeader>
        <CardTitle>{content.name}</CardTitle>
        {!edit && (
          <CardDescription className="max-w-2xl">
            {updatedContent}
          </CardDescription>
        )}
        {edit && (
          <>
            <CardDescription className="max-w-2xl">
              <Textarea
                defaultValue={updatedContent}
                onChange={(e) => setContentValue(e.target.value)}
              />
            </CardDescription>
          </>
        )}
      </CardHeader>

      {edit && (
        <>
          <CardFooter className="space-x-3">
            <Button
              variant={"outline"}
              className="w-max"
              onClick={handleCancel}
            >
              Cancel
            </Button>
            <Button className="w-max" onClick={() => mutation.mutate()}>
              Save
            </Button>
          </CardFooter>
        </>
      )}

      {!edit && (
        <>
          <CardFooter>
            <Button
              variant={"outline"}
              className="w-max"
              onClick={() => setEdit(true)}
            >
              Edit content
            </Button>
          </CardFooter>
        </>
      )}
    </Card>
  );
}
